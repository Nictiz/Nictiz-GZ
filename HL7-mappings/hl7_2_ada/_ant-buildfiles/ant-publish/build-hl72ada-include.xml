<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." name="build-ada2hl7-include" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <ant antfile="../../../../../_ant-buildfiles/ant-include/ant.ivy.xml" inheritall="true" usenativebasedir="true"/>
    <property name="xsl.saxon" value="${saxon.path}"/>
    <property name="xsl.saxon.class" value="net.sf.saxon.TransformerFactoryImpl"/>

    <property name="echo.label.in" value="ADA"/>
    <property name="echo.label.out" value="HL7"/>
    
    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>
    <property name="project.author" value="Nictiz"/>
    <property name="project.website" value="http://www.nictiz.nl/"/>
    <property name="project.status" value="beta"/>
    <property name="project.license" value="GNU-LGPL"/>
    <property name="project.copyright" value="true"/>
    <property name="project.description" value="Contains all relevant materials to convert valid ${echo.label.in} instances for ${is.name} to  ${echo.label.out}"/>
    <property name="project.prefix" value="${is.abbreviation}_${is.version}"/>
    <property name="dummy.output.dir" value="../../dummy"/>

    <target name="setup_sub" description="Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project and refreshed ada instances from test_xslt">

        <antcall target="setup_sub_schemas">
            <param name="schema.string" value="${schema.string}"/>
        </antcall>

        <antcall target="setup_sub_instances">
             <param name="fileset.dir" value="${fileset.dir}"/>
        </antcall>

    </target>

    <target name="setup_sub_schemas" description="Setup ${sub.build.dir} containing the new/schemas folder from the original ADA project">
        <echo/>
        <echo>Setup ${sub.build.dir} containing refreshed ada schemas (${schema.string})</echo>
        
        <mkdir dir="${sub.build.dir}/ada_schemas"/>
        <delete>
            <fileset dir="${sub.build.dir}/ada_schemas" includes="*.xsd"/>
        </delete>

        <copy todir="${sub.build.dir}/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="${schema.string}"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>

    </target>

    <target name="setup_sub_instances" description="Setup ${sub.build.dir} containing refreshed hl7 instances (${fileset.include})">

        <echo/>
        <echo>Setup ${sub.build.dir} containing refreshed hl7 instances (${fileset.include})</echo>

        <mkdir dir="${sub.build.dir}/${fileset.dir}"/>
        <delete>
            <fileset dir="${sub.build.dir}/${fileset.dir}" includes="${fileset.include}"/>
        </delete>
        <copy todir="${sub.build.dir}/${fileset.dir}" failonerror="true">
            <fileset dir="${refs.dir}/${fileset.dir}_examples">
                <include name="${fileset.include}"/>
            </fileset>
        </copy>

    </target>
    
    <target name="convert_hl7_2_ada_sub">
        
        <property name="xsl.hl72ada" value="${sub.build.dir}/${xsl.name}"/>
        
        <property name="xsl.input" value="${sub.build.dir}/${xsl.in}"/>
        <property name="xsl.output" value="${sub.build.dir}/${xsl.out}"/>
        
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${xsl.output}"/>
        <delete>
            <fileset dir="${xsl.output}" includes="*.xml"/>
        </delete>
        
        <sequential>
            <fileset id="inputfilesMP" dir="${xsl.input}" includes="*.xml"/>
            
            <echo/>
            <echo>${echo.label} ${xsl.hl72ada} input dir ${xsl.input}</echo>
            <xslt force="true" style="${xsl.hl72ada}" destdir="${xsl.output}" extension=".xml" useImplicitFileset="false">
                <fileset refid="inputfilesMP"/>
                <param name="outputSchemaRef" expression="${output.ada.schemaref}" if="output.ada.schemaref"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>
    </target>
    

</project>
