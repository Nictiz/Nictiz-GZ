<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." default="convert_ada_2_fhir_30" name="build-ada2fhir-mp-30" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <property name="is.version" value="9.3.0"/>
    <property name="is.version.short" value="93"/>
    <!-- date.T for conversion -->
    <property name="date.T" value="2023-01-01"/>
    <!-- specify BSN oid for masking BSN identifiers -->
    <property name="mask.ids" value=""/>
    <property name="mask.ids.mm" value="2.16.840.1.113883.2.4.6.3"/>

    <import file="../../../_ant-buildfiles/ant-publish/build-ada2fhir-mp-include.xml"/>

    <property name="ada.project.source.dir" value="${build.dir}\..\..\..\..\art_decor\projects\${is.abbreviation}-${is.abbreviation}${is.version.short}"/>
    <property name="refs.dir" value="${build.dir}\..\..\..\..\art_decor\adarefs2ada\${is.abbreviation}\${is.version}"/>
    <property name="schema.bundle" value="https://hl7.org/fhir/R4B/bundle.xsd"/>

    <!-- local version of schematron, since we need the svrl xsl -->
    <property name="validate.dir" value="${build.dir}/fhir-xsd/R4-sch"/>
    <property name="xsl.validate.svrl" value="${build.dir}/../../../util/validate-svrl-output.xsl"/>

    <target name="setup_30">
        <!-- beschikbaarstellen_medicatiegegevens -->
        <mkdir dir="${build.dir}/${usecase.mg}"/>
        <antcall target="setup_sub_schemas">
            <param name="sub.build.dir" value="${build.dir}/${usecase.mg}"/>
            <param name="schema.string" value="*${usecase.mg}.xsd"/>
        </antcall>

        <echo>Copying ADA instances from ${refs.dir}/ada_instance to ${sub.build.dir}/${fileset.dir}</echo>
        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${build.dir}/${usecase.mg}/ada_instance"/>
        <!-- deleting previous results, if any -->
        <delete>
            <fileset dir="${build.dir}/${usecase.mg}/ada_instance" includes="*.*"/>
        </delete>
        <copy todir="${build.dir}/${usecase.mg}/ada_instance" failonerror="true">
            <!-- get the "all" instances from raadplegen_medicatiegegevens, for illustration purposes -->
            <fileset dir="${refs.dir}/${usecase.mg.rp}/ada_instance_response">
                <include name="*-ALL.xml"/>
            </fileset>
        </copy>

        <!-- sturen_medicatiegegevens  -->
        <echo>sturen_medicatiegegevens</echo>
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.mg.st}"/>
            <param name="schema.string" value="*${usecase.mg.st}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <!-- only the sets, for illustration purposes -->
            <param name="fileset.include" value="mgsets-*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.mg.st}"/>
        </antcall>

        <!-- sturen_medicatievoorschrift -->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.mv}"/>
            <param name="schema.string" value="*${usecase.mv}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.mv}"/>
        </antcall>

        <!-- sturen_afhandeling_medicatievoorschrift -->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.amv}"/>
            <param name="schema.string" value="*${usecase.amv}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.amv}"/>
        </antcall>

        <!-- sturen_voorstel_medicatieafspraak -->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.vma}"/>
            <param name="schema.string" value="*${usecase.vma}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.vma}"/>
        </antcall>

        <!-- sturen_antwoord_voorstel_medicatieafspraak -->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.avma}"/>
            <param name="schema.string" value="*${usecase.avma}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.avma}"/>
        </antcall>

        <!-- sturen_voorstel_verstrekkingsverzoek -->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.vvv}"/>
            <param name="schema.string" value="*${usecase.vvv}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.vvv}"/>
        </antcall>

        <!-- sturen_antwoord_voorstel_verstrekkingsverzoek -->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.avvv}"/>
            <param name="schema.string" value="*${usecase.avvv}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*tst*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.avvv}"/>
        </antcall>

        <!-- xml voorbeelden -->
        <antcall target="setup_sub_instances">
            <param name="sub.build.dir" value="${build.dir}/xml-voorbeelden"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*.xml"/>
            <param name="refs.dir" value="${refs.dir}/xml-voorbeelden"/>
        </antcall>

    </target>

    <target name="convert_ada_2_fhir_30">

        <property name="xsl.output.dummy" value="dummy"/>

        <echo>the MP stuff for version 9.3.0</echo>
        <echo/>
        <echo>beschikbaarstellen_medicatiegegevens</echo>
        <property name="xsl.input.mg" value="${build.dir}/${usecase.mg}/ada_instance"/>
        <property name="xsl.output.mg" value="${build.dir}/${usecase.mg}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.mg}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.mg}" includes="*.*"/>
        </delete>

        <!--  bundles for beschikbaarstellen_medicatiegegevens -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.mg}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.mg}/payload/${usecase.mg}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.mg}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources using the output.dir, but ant xslt still needs an output dir -->
            <param name="xsl.out" value="${xsl.output.mg}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- omitting id's for transformations https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_R4#Usage_of_the_.id.2C_.identifier_and_.fullUrl_elements_in_FHIR_instances -->
            <param name="param.populateId" value="false"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.mg}"/>
        </antcall>

        <echo>sturen_medicatiegegevens</echo>
        <mkdir dir="${build.dir}/${usecase.mg.st}/fhir_instance"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${build.dir}/${usecase.mg.st}/fhir_instance" includes="*.*"/>
        </delete>
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.mg.st}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.mg.st}/payload/${usecase.mg.st}_2_fhir.xsl"/>
            <param name="xsl.in" value="${build.dir}/${usecase.mg.st}/ada_instance"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources using the output.dir, but ant xslt still needs an output dir -->
            <param name="xsl.out" value="${build.dir}/${usecase.mg.st}/fhir_instance"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${build.dir}/${usecase.mg.st}/fhir_instance"/>
        </antcall>
        
        <echo>sturen_medicatievoorschrift</echo>
        <property name="xsl.input.mv" value="${build.dir}/${usecase.mv}/ada_instance"/>
        <property name="xsl.output.mv" value="${build.dir}/${usecase.mv}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.mv}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.mv}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.mv}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.mv}/payload/${usecase.mv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.mv}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.mv}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.mv}"/>
        </antcall>

        <echo>sturen_afhandeling_medicatievoorschrift</echo>
        <property name="xsl.input.amv" value="${build.dir}/${usecase.amv}/ada_instance"/>
        <property name="xsl.output.amv" value="${build.dir}/${usecase.amv}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.amv}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.amv}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.amv}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.amv}/payload/${usecase.amv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.amv}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.amv}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.amv}"/>
        </antcall>

        <echo>sturen_voorstel_medicatieafspraak</echo>
        <property name="xsl.input.vma" value="${build.dir}/${usecase.vma}/ada_instance"/>
        <property name="xsl.output.vma" value="${build.dir}/${usecase.vma}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.vma}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.vma}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.vma}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.vma}/payload/${usecase.vma}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.vma}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.vma}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.vma}"/>
        </antcall>

        <echo>sturen_antwoord_voorstel_medicatieafspraak</echo>
        <property name="xsl.input.avma" value="${build.dir}/${usecase.avma}/ada_instance"/>
        <property name="xsl.output.avma" value="${build.dir}/${usecase.avma}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.avma}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.avma}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.avma}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.avma}/payload/${usecase.avma}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.avma}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.avma}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.avma}"/>
        </antcall>

        <echo>sturen_voorstel_verstrekkingsverzoek</echo>
        <property name="xsl.input.vvv" value="${build.dir}/${usecase.vvv}/ada_instance"/>
        <property name="xsl.output.vvv" value="${build.dir}/${usecase.vvv}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.vvv}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.vvv}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.vvv}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.vvv}/payload/${usecase.vvv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.vvv}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.vvv}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.vvv}"/>
        </antcall>

        <echo>sturen_antwoord_voorstel_verstrekkingsverzoek</echo>
        <property name="xsl.input.avvv" value="${build.dir}/${usecase.avvv}/ada_instance"/>
        <property name="xsl.output.avvv" value="${build.dir}/${usecase.avvv}/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.avvv}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.avvv}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="${usecase.avvv}"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.avvv}/payload/${usecase.avvv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.avvv}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.avvv}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.avvv}"/>
        </antcall>


        <!-- Finally some extra test files to challenge ourselves -->
        <echo>nictiz_test</echo>
        <property name="xsl.input.ntest" value="${build.dir}/nictiz_test/ada_instance"/>
        <property name="xsl.output.ntest" value="${build.dir}/nictiz_test/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.ntest}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.ntest}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="nictiz_test"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.mg}/payload/${usecase.mg}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.ntest}"/>
            <param name="xsl.in.include" value="*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.ntest}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- omitting id's for transformations https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_R4#Usage_of_the_.id.2C_.identifier_and_.fullUrl_elements_in_FHIR_instances -->
            <param name="param.populateId" value="false"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.ntest}"/>
        </antcall>

        <!-- delete dummy dir -->
        <delete dir="${xsl.output.dummy}"/>

    </target>

    <target name="convert_ada_2_fhir_30_examples">
        <property name="xsl.output.dummy" value="dummy"/>

        <!-- examples -->
        <echo>xml-voorbeelden</echo>
        <property name="xsl.input.exmpl" value="${build.dir}/xml-voorbeelden/ada_instance"/>
        <property name="xsl.output.exmpl" value="${build.dir}/xml-voorbeelden/fhir_instance"/>

        <!-- make dir if it does not exist (anymore) -->
        <mkdir dir="${xsl.output.exmpl}"/>
        <echo>Deleting previous results, if any</echo>
        <delete>
            <fileset dir="${xsl.output.exmpl}" includes="*.*"/>
        </delete>
        <!-- bundles -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.amv}/payload/${usecase.amv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="av-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.avma}/payload/${usecase.avma}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="avma-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.avvv}/payload/${usecase.avvv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="avvv-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.dummy}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>      
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.mg}/payload/${usecase.mg}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="mg-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- omitting id's for transformations https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_R4#Usage_of_the_.id.2C_.identifier_and_.fullUrl_elements_in_FHIR_instances -->
            <param name="param.populateId" value="false"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.mv}/payload/${usecase.mv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="mv-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.vma}/payload/${usecase.vma}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="vma-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>
        <antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/${usecase.vvv}/payload/${usecase.vvv}_2_fhir.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="vvv-*.xml"/>
            <!-- the xsl will write it's resources, but ant xslt still needs output dir -->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-- this dir is relative to the xsl.out, so we need an extra dir up -->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>
        <!-- fixtures / resources for beschikbaarstellen_medicatiegegevens-->
        <!-- AWE - not sure why we would create these touchstone fictures for the examples so I commented out the call below. If we do need themo, the call below overwrites the original mg-example bundle in the output, so it needs work -->
        <!--<antcall target="convert_ada_2_fhir_sub">
            <param name="usecase" value="xml-voorbeelden"/>
            <param name="xsl.convert" value="${build.dir}/touchstone/fhir_fixtures4Touchstone/payload/${usecase.mg}_2_fhir_resources.xsl"/>
            <param name="xsl.in" value="${xsl.input.exmpl}"/>
            <param name="xsl.in.include" value="mg-*.xml"/>
            <!-\- the xsl will write it's resources, but ant xslt still needs output dir -\->
            <param name="xsl.out" value="${xsl.output.exmpl}"/>
            <param name="param.tdate" value="${date.T}" if:set="date.T"/>
            <param name="param.maskids" value="${mask.ids}"/>
            <!-\- omitting id's for transformations https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_R4#Usage_of_the_.id.2C_.identifier_and_.fullUrl_elements_in_FHIR_instances -\->
            <param name="param.populateId" value="false"/>
            <!-\- this dir is relative to the xsl.out, so we need an extra dir up -\->
            <param name="output.dir" value="../${xsl.output.exmpl}"/>
        </antcall>-->

    </target>

    <target name="schematronvalidate_fhir_30">

        <!-- first the schematrons per instance -->
        <antcall target="validate_fhir_30"/>
        <!-- then summarize the results per use case -->
        <antcall target="schematronresults_fhir_30"/>

    </target>

    <target name="schemavalidate_fhir_30">

        <echo>Schema validate **/xml-voorbeelden/fhir_instance/mg-*.xml with ${schema.bundle}</echo>

        <antcall target="schemavalidate_sub">
            <param name="fileset.include" value="**/xml-voorbeelden/fhir_instance/mg-*.xml"/>
            <!--            <param name="fileset.exclude" value="nictiz_test/**/*"/>-->
            <param name="validate.schema" value="${schema.bundle}"/>
        </antcall>
        
        <echo>Schema validate **/nictiz_test/fhir_instance/mg-*.xml with ${schema.bundle}</echo>
        
        <antcall target="schemavalidate_sub">
            <param name="fileset.include" value="**/nictiz_test/fhir_instance/*.xml"/>
            <!--            <param name="fileset.exclude" value="nictiz_test/**/*"/>-->
            <param name="validate.schema" value="${schema.bundle}"/>
        </antcall>

        <echo>Schema validate **/beschikbaarstellen_medicatiegegevens/fhir_instance/mg-*.xml with ${schema.bundle}</echo>
        <antcall target="schemavalidate_sub_url">
            <param name="fileset.include" value="**/beschikbaarstellen_medicatiegegevens/fhir_instance/mg-*.xml"/>
            <param name="fileset.exclude" value="nictiz_test/**/*"/>
            <param name="fileset.exclude2" value="touchstone/**/*"/>
            <param name="validate.schema" value="${schema.bundle}"/>
        </antcall>

        <!--<echo>**/fhir_instance/*.xml, but not beschikbaarstellen_medicatiegegevens/**/*</echo>
        <antcall target="schemavalidate_sub_url">
            <param name="fileset.include" value="**/fhir_instance/*.xml"/>
            <param name="fileset.exclude" value="beschikbaarstellen_medicatiegegevens/**/*"/>
            <!-\-            <param name="fileset.exclude2" value="nictiz_test/**/*"/>-\->
            <param name="validate.schema" value="${schema.bundle}"/>
        </antcall>-->

    </target>

    <target name="validate_fhir_30">

        <!-- examples -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/xml-voorbeelden"/>
            <param name="include" value="*-example-*v30.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- beschikbaarstellen_medicatiegegevens -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.mg}"/>
            <param name="include" value="mg-*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>
        
        <!-- sturen_medicatiegegevens -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.mg.st}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>
        

        <!-- sturen_medicatievoorschrift -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.mv}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- sturen_afhandeling_medicatievoorschrift -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.amv}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- sturen_voorstel_medicatieafspraak -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.vma}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- sturen_antwoord_voorstel_medicatieafspraak -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.avma}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- sturen_voorstel_verstrekkingsverzoek -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.vvv}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- sturen_antwoord_voorstel_verstrekkingsverzoek -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.avvv}"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

        <!-- nictiz_test -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/nictiz_test"/>
            <param name="include" value="*.xml"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.mp" value="${validate.dir}/bundle.xsl"/>
        </antcall>

    </target>

    <target name="validate_fhir_sub">
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${sub.build.dir}/${xsl.output}"/>
        <delete>
            <fileset dir="${sub.build.dir}/${xsl.output}" includes="${include}"/>
        </delete>

        <fileset id="inputfiles" dir="${sub.build.dir}/${xsl.input}" includes="${include}"/>

        <echo/>
        <echo>${echo.label} ${xsl.mp} input dir ${sub.build.dir}/${xsl.input}</echo>
        <xslt force="true" style="${xsl.mp}" destdir="${sub.build.dir}/${xsl.output}" extension=".xml" useImplicitFileset="false">
            <fileset refid="inputfiles"/>
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
        </xslt>
    </target>

    <target name="schematronresults_fhir_30">

        <!-- look at the results from target schematronvalidate_hl7_930 for conclusions -->
        <!-- examples -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_xml-voorbeelden.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/xml-voorbeelden/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- nictiz_test -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_nictiz_test.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/nictiz_test/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- beschikbaarstellen_medicatiegegevens -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.mg}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.mg}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- beschikbaarstellen_medicatiegegevens -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.mg.st}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.mg.st}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_medicatievoorschrift -->
           <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.mv}.xml"/>
               <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.mv}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_afhandeling_medicatievoorschrift -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.amv}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.amv}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_voorstel_medicatieafspraak -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.vma}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.vma}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_antwoord_voorstel_medicatieafspraak -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.avma}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.avma}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_voorstel_verstrekkingsverzoek -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.vvv}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.vvv}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        <!-- sturen_antwoord_voorstel_verstrekkingsverzoek -->
        <antcall target="schematronresults_fhir_30_sub">
            <param name="result.xml" value="${build.dir}/validate/hl7_${usecase.avvv}.xml"/>
            <param name="input.dir" value="../../../HL7-mappings/ada_2_fhir-r4/mp/${is.version}/${usecase.avvv}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>

    </target>

    <target name="schematronresults_fhir_30_sub">

        <echo/>
        <echo>${echo.label} ${xsl.validate.svrl} make recap of validation in ${result.xml}</echo>
        <xslt force="true" style="${xsl.validate.svrl}" in="${xsl.validate.svrl}" out="${result.xml}">
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
            <param name="inputDir" expression="${input.dir}"/>
            <param name="inputFileSet" expression="${input.fileset}"/>
        </xslt>

    </target>

    <target name="schemavalidate_sub_url">

        <fileset id="inputfiles.validate" dir="${build.dir}">
            <include name="${fileset.include}"/>
            <exclude name="${fileset.exclude}" if="fileset.exclude"/>
            <exclude name="${fileset.exclude2}" if="fileset.exclude2"/>
        </fileset>

        <echo/>
        <echo>${echo.label} validate schema with input files ${fileset.include} but excluding ${fileset.exclude} and ${fileset.exclude2}  and schema ${validate.schema}</echo>
        <schemavalidate warn="true" failonerror="false">
            <fileset refid="inputfiles.validate"/>
            <schema namespace="http://hl7.org/fhir" url="${validate.schema}"/>
        </schemavalidate>

    </target>



</project>
