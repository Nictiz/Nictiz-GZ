<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." default="convert_ada_2_fhir_300" name="build-ada2fhir-lab-300" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <property name="is.version" value="3.0.0"/>
    <property name="is.version.short" value="300"/>
    <property name="date.T" value="2022-01-01"/>

    <property name="echo.label.in" value="ADA"/>
    <property name="echo.label.out" value="FHIR"/>
    
    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>

    <!-- place import after properties above, otherwise it can't resolve these properties  -->
    <import file="../../../_ant-buildfiles/ant-publish/build-ada2fhir-lab-include.xml"/>

    <property name="gen.schematron.ref" value="false"/>
    <property name="usecase.nt" value="nictiz_test"/>
    
    <property name="ada.project.source.dir" value="${build.dir}/../../../art_decor/projects/lab"/>
    <!--<property name="schema.fhir" value="https://hl7.org/fhir/R4/fhir-single.xsd"/>-->
    <!--<property name="schematron.fhir" value="${build.dir}/../../../../../../Bitbucket/art-decor-backend-existdb5/fhir/4.0/resources/schemas/fhir-invariants.xsl"/>-->
    <property name="schema.fhir" value="${build.dir}/../../fhir/fhir_schemas/fhir-single.xsd"/>
    <property name="schematron.fhir" value="${build.dir}/../../fhir/fhir_schemas/fhir-invariants.xsl"/>
    
    <property name="xsl.validate.svrl" value="${build.dir}/../../../../YATC-shared/xsl/util/validate-svrl-output.xsl"/>
    <!--<property name="xsl.validate.svrl.input" value="${build.dir}/../../../util/validate-svrl-default-input.xml"/>-->
    
    <target name="setup_lab300" description="Setup subdirectories, schemas, ada instance xml's in ${build.dir} for ${is.name} ${is.version}">

        <!-- laboratoriumresultaten-->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="schema.string" value="*${usecase.labsr}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.labsr}"/>
        </antcall>
        
        <!-- at the moment only schemas for nictiz test -->
        <!--<antcall target="setup_sub_schemas">
            <param name="usecase" value="${usecase.nt}"/>
            <param name="schema.string" value="*${usecase.labbr}.xsd"/>
        </antcall>-->
        
        <!-- laboratoriumresultaten-->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <param name="schema.string" value="*${usecase.labbr}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.labbr}"/>
        </antcall>
        
        <!-- laboratoriumresultaten-->
        <antcall target="setup_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsroa}"/>
            <param name="schema.string" value="*${usecase.labsroa}.xsd"/>
            <param name="fileset.dir" value="ada_instance"/>
            <param name="fileset.include" value="*.xml"/>
            <param name="refs.dir" value="${refs.dir}/${usecase.labsroa}"/>
        </antcall>

        <!-- xml voorbeelden -->
        <!-- schemas -->
        <!--<mkdir dir="${build.dir}/xml-voorbeelden/ada_schemas"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/ada_schemas" includes="*.xsd"/>
        </delete>
        <copy todir="${build.dir}/xml-voorbeelden/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="*${usecase.labsr}.xsd"/>
                <include name="*${usecase.labbr}.xsd"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>
        <!-\- instances -\->
        <echo/>
        <echo>Setup ${build.dir}/xml-voorbeelden containing refreshed ada production instances (${refs.dir}/xml-voorbeelden/ada_instance/*example*.xml)</echo>

        <mkdir dir="${build.dir}/xml-voorbeelden/ada_instance"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/ada_instance" includes="*example*.xml"/>
        </delete>
        <copy todir="${build.dir}/xml-voorbeelden/ada_instance" failonerror="true">
            <fileset dir="${refs.dir}/xml-voorbeelden/ada_instance">
                <include name="*example*.xml"/>
            </fileset>
        </copy>-->


        <!-- let's convert to fhir too while we're at it -->
        <!-- generic stuff for all lab versions -->
        <antcall target="convert_ada_2_fhir_300"/>

    </target>

    <target name="convert_ada_2_fhir_300">
        
        <!-- convert beschikbaarstellen_laboratoriumresultaten -->
        <!-- This process also creates empty Bundle files, should be fixed some time -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <!--<param name="xsl.name" value="../${usecase.labbr}/payload/${usecase.labbr}.xsl"/>-->
            <param name="xsl.name" value="../${usecase.labsr}/payload/${usecase.labsr}.xsl"/>
            <param name="xsl.in" value="ada_instance"/>
            <param name="xsl.out" value="fhir_instance"/>
            <!--<param name="param.tdate" value="${date.T}}"/>-->
            <param name="param.writeOutputToDisk" value="true"/>
            <param name="param.populateId" value="true"/>
            <param name="param.referencingStrategy" value="logicalId"/>
        </antcall>

        <!-- convert sturen_laboratoriumresultaten -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="xsl.name" value="../${usecase.labsr}/payload/${usecase.labsr}.xsl"/>
            <param name="xsl.in" value="ada_instance"/>
            <param name="xsl.out" value="fhir_instance"/>
            <!--<param name="param.tdate" value="${date.T}}"/>-->
            <param name="param.writeOutputToDisk" value="false"/>
        </antcall>
        
        <!-- convert sturen_laboratoriumresultaat_op_aanvraag -->
        <antcall target="convert_ada_2_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsroa}"/>
            <!--<param name="xsl.name" value="../${usecase.labsroa}/payload/${usecase.labsroa}.xsl"/>-->
            <param name="xsl.name" value="../${usecase.labsr}/payload/${usecase.labsr}.xsl"/>
            <param name="xsl.in" value="ada_instance"/>
            <param name="xsl.out" value="fhir_instance"/>
            <!--<param name="param.tdate" value="${date.T}}"/>-->
            <param name="param.writeOutputToDisk" value="false"/>
        </antcall>

        <!-- also do the examples -->
        <!--<antcall target="convert_ada_2_fhir_examples_300"/>-->
        
        <!-- delete empty default files that xsl creates in addition to the separate instances -->
        <delete>
            <fileset dir="${build.dir}/${usecase.labbr}/fhir_instance" includes="**/lr-blr*.xml">
                <size value="0"/>
            </fileset>
            <fileset dir="${build.dir}/${usecase.labsr}/fhir_instance" includes="**/lr-slr*.xml">
                <size value="0"/>
            </fileset>
            <fileset dir="${build.dir}/${usecase.labsroa}/fhir_instance" includes="**/lr-loa*.xml">
                <size value="0"/>
            </fileset>
        </delete>
        
    </target>

    <target name="convert_ada_2_fhir_examples_300">
        <!-- examples -->
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${build.dir}/xml-voorbeelden/fhir_instance"/>
        <delete>
            <fileset dir="${build.dir}/xml-voorbeelden/fhir_instance" includes="*.xml"/>
        </delete>
        
        <!-- beschikbaarstellen_laboratoriumresultaten -->
        <sequential>
            <fileset id="inputfiles" dir="${build.dir}/xml-voorbeelden/ada_instance" includes="lu*.xml"/>
            
            <echo/>
            <echo>${echo.label} ${build.dir}/${usecase.labbr}/payload/${usecase.labbr}.xsl input dir ${build.dir}/xml-voorbeelden/ada_instance</echo>
            <xslt force="true" style="${build.dir}/${usecase.labbr}/payload/${usecase.labbr}.xsl" destdir="${build.dir}/xml-voorbeelden/fhir_instance" extension=".xml" useimplicitfileset="false" failonnoresources="false">
                <fileset refid="inputfiles"/>
                <param name="generateInstructionText" expression="true"/>
                <!--<param name="dateT" expression="${date.T}" if="date.T"/>-->
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <param name="bundleSelfLink" expression="http://dummy.nictiz.nl/dummyquery"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>
        
        <!-- sturen_laboratoriumresultaten -->
        <sequential>
            <fileset id="inputfiles" dir="${build.dir}/xml-voorbeelden/ada_instance" includes="lu*.xml"/>

            <echo/>
            <echo>${echo.label} ${build.dir}/${usecase.labsr}/payload/${usecase.labsr}.xsl input dir ${build.dir}/xml-voorbeelden/ada_instance</echo>
            <xslt force="true" style="${build.dir}/${usecase.labsr}/payload/${usecase.labsr}.xsl" destdir="${build.dir}/xml-voorbeelden/fhir_instance" extension=".xml" useimplicitfileset="false" failonnoresources="false">
                <fileset refid="inputfiles"/>
                <param name="generateInstructionText" expression="true"/>
                <!--<param name="dateT" expression="${date.T}" if="date.T"/>-->
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <param name="bundleSelfLink" expression="http://dummy.nictiz.nl/dummyquery"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>
        
        <!-- sturen_laboratoriumresultaat_op_aanvraag -->
        <sequential>
            <fileset id="inputfiles" dir="${build.dir}/xml-voorbeelden/ada_instance" includes="lu*.xml"/>
            
            <echo/>
            <echo>${echo.label} ${build.dir}/${usecase.labsroa}/payload/${usecase.labsroa}.xsl input dir ${build.dir}/xml-voorbeelden/ada_instance</echo>
            <xslt force="true" style="${build.dir}/${usecase.labsroa}/payload/${usecase.labsroa}.xsl" destdir="${build.dir}/xml-voorbeelden/fhir_instance" extension=".xml" useimplicitfileset="false" failonnoresources="false">
                <fileset refid="inputfiles"/>
                <param name="generateInstructionText" expression="true"/>
                <!--<param name="dateT" expression="${date.T}" if="date.T"/>-->
                <param name="schematronRef" expression="${gen.schematron.ref}" if="gen.schematron.ref"/>
                <param name="bundleSelfLink" expression="http://dummy.nictiz.nl/dummyquery"/>
                <factory name="${xsl.saxon.class}"/>
                <classpath location="${xsl.saxon}"/>
            </xslt>
        </sequential>

    </target>

    <target name="schemavalidate_fhir_300">

        <!-- all use cases fhir_instance-->
        <antcall target="schemavalidate_fhir_sub">
            <param name="fileset.include" value="**/fhir_instance/*.xml"/>
            <param name="fileset.exclude" value="nictiz_test/**/*"/>
            <param name="validate.schema" value="${schema.fhir}"/>
        </antcall>
        
    </target>

    <target name="schematronvalidate_fhir_300">

        <!-- first the schematrons per instance -->
        <antcall target="validate_fhir_300"/>
        
        <!-- beschikbaarstellen_laboratoriumresultaten fhir organizer -->
        <antcall target="schematronresults_fhir_300_sub">
            <param name="result.xml" value="${build.dir}/validate/fhir_${usecase.labbr}.xml"/>
            <param name="input.dir" value="${basedir}/../../${usecase.labbr}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>

        <!-- sturen_laboratoriumresultaten fhir organizer -->
        <antcall target="schematronresults_fhir_300_sub">
            <param name="result.xml" value="${build.dir}/validate/fhir_${usecase.labsr}.xml"/>
            <param name="input.dir" value="${basedir}/../../${usecase.labsr}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>
        
        <!-- sturen_laboratoriumresultaat_op_aanvraag fhir organizer -->
        <antcall target="schematronresults_fhir_300_sub">
            <param name="result.xml" value="${build.dir}/validate/fhir_${usecase.labsroa}.xml"/>
            <param name="input.dir" value="${basedir}/../../${usecase.labsroa}/validate_fhir_instance"/>
            <param name="input.fileset" value="*.xml"/>
        </antcall>

    </target>

    <target name="validate_fhir_300">

        <!-- beschikbaarstellen_laboratoriumresultaten -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labbr}"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.lab" value="${schematron.fhir}"/>
        </antcall>

        <!-- sturen_laboratoriumresultaten -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsr}"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.lab" value="${schematron.fhir}"/>
        </antcall>
        
        <!-- sturen_laboratoriumresultaat_op_aanvraag -->
        <antcall target="validate_fhir_sub">
            <param name="sub.build.dir" value="${build.dir}/${usecase.labsroa}"/>
            <param name="xsl.input" value="fhir_instance"/>
            <param name="xsl.output" value="validate_fhir_instance"/>
            <param name="xsl.lab" value="${schematron.fhir}"/>
        </antcall>

    </target>

    <target name="validate_fhir_sub">
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${sub.build.dir}/${xsl.output}"/>
        <delete>
            <fileset dir="${sub.build.dir}/${xsl.output}" includes="*.xml"/>
        </delete>

        <fileset id="inputfiles" dir="${sub.build.dir}/${xsl.input}" includes="*.xml"/>

        <echo/>
        <echo>${echo.label} ${xsl.lab} input dir ${sub.build.dir}/${xsl.input}</echo>
        <xslt force="true" style="${xsl.lab}" destdir="${sub.build.dir}/${xsl.output}" extension=".xml" useImplicitFileset="false">
            <fileset refid="inputfiles"/>
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
        </xslt>
    </target>

    <!-- validates xml using xsd -->
    <target name="schemavalidate_fhir_sub">
        
        <fileset id="inputfiles.validate" dir="${build.dir}">
            <include name="${fileset.include}"/>
            <exclude name="${fileset.exclude}"/>
        </fileset>
        
        <echo/>
        <echo>${echo.label} validate schema with input files ${fileset.include} but excluding ${fileset.exclude} and schema ${validate.schema}</echo>
        <schemavalidate warn="true" failonerror="false">
            <fileset refid="inputfiles.validate"/>
            <schema namespace="http://hl7.org/fhir" url="${schema.fhir}"/>
        </schemavalidate>
        
    </target>
    
    <target name="schematronresults_fhir_300_sub">
        
        <echo/>
        <echo>${echo.label} ${xsl.validate.svrl} make recap of validation in ${result.xml}</echo>
        <xslt force="true" style="${xsl.validate.svrl}" in="${xsl.validate.svrl}" out="${result.xml}">
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
            <param name="inputDir" expression="${input.dir}"/>
            <param name="inputFileSet" expression="${input.fileset}"/>
        </xslt>
        
    </target>
</project>
